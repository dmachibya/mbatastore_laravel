<?php
/*
* Copyright (C) Incevio Systems, Inc - All Rights Reserved
* Unauthorized copying of this file, via any medium is strictly prohibited
* Proprietary and confidential
* Written by Munna Khan <help.zcart@gmail.com>, September 2018
*/
 namespace App\Http\Controllers\Admin; use App\Models\Package; use Illuminate\Http\Request; use App\Services\PackageInstaller; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Cache; use Illuminate\Support\Facades\Artisan; use App\Http\Requests\AdminOnlyAccessRequest; use App\Http\Requests\Validations\PackageInstallationRequest; class PackagesController extends Controller { public function index(AdminOnlyAccessRequest $request) { $installables = $this->scanPackages(); $installedPackages = Package::all(); return view("\141\x64\155\151\x6e\56\x70\x61\x63\x6b\x61\x67\x65\x73\56\x69\x6e\x64\x65\170", compact("\151\156\x73\164\141\x6c\154\x61\x62\x6c\145\163", "\x69\x6e\163\x74\x61\154\x6c\x65\x64\x50\141\143\153\x61\x67\145\163")); } public function upload(AdminOnlyAccessRequest $request) { return view("\141\144\x6d\x69\156\x2e\x70\x61\143\153\141\x67\145\163\56\x5f\165\160\x6c\x6f\x61\x64"); } public function save(AdminOnlyAccessRequest $request) { echo "\x3c\160\x72\145\76"; print_r($request->all()); echo "\74\x70\x72\x65\x3e"; exit("\x65\156\144\41"); } public function initiate(AdminOnlyAccessRequest $request, string $package) { if (!$this->isDemo()) { goto TYe9h; } return back()->with("\x77\x61\x72\156\x69\156\x67", trans("\x6d\x65\x73\x73\x61\147\x65\x73\x2e\x64\x65\155\157\137\x72\x65\163\x74\x72\151\143\x74\x69\157\156")); TYe9h: $installable = $this->scanPackages($package); if (!($installable && Package::where("\163\154\x75\147", $installable["\163\x6c\x75\x67"])->exists())) { goto CUANS; } return back()->with("\x65\162\162\157\x72", trans("\x6d\145\x73\163\x61\x67\145\x73\56\x70\141\x63\x6b\x61\147\145\137\x69\156\163\164\141\154\154\x65\144\137\141\154\x72\x65\x61\x64\171", ["\x70\x61\x63\x6b\x61\x67\x65" => $package])); CUANS: return view("\141\x64\x6d\x69\156\x2e\160\141\143\153\141\147\x65\x73\56\137\x69\x6e\x69\164\x69\141\164\145", compact("\x69\156\x73\164\x61\x6c\154\x61\142\x6c\145")); } public function upgrade(AdminOnlyAccessRequest $request, string $package) { if (!$this->isDemo()) { goto nzzcv; } return back()->with("\x77\141\x72\x6e\151\x6e\x67", trans("\x6d\x65\163\163\x61\x67\x65\163\56\144\x65\155\157\137\162\x65\163\164\x72\x69\x63\x74\151\157\x6e")); nzzcv: $installable = $this->scanPackages($package); if ($installable) { goto SRjST; } return back()->with("\x65\x72\x72\157\162", trans("\x6d\x65\163\x73\141\147\145\163\56\160\141\143\x6b\x61\x67\145\137\156\157\164\x5f\146\x6f\165\156\144", ["\x70\141\x63\153\x61\x67\x65" => $package])); SRjST: try { $installer = new PackageInstaller($request, $installable); $installer->upgrade(); } catch (\Exception $e) { Log::error($e); return redirect()->route("\141\144\155\151\x6e\56\x70\141\x63\x6b\x61\x67\x65\x73")->with("\x65\x72\x72\x6f\162", $e->getMessage()); } return redirect()->route("\x61\144\155\151\156\x2e\160\141\143\153\141\x67\x65\x73")->with("\163\165\x63\x63\145\163\x73", trans("\155\x65\x73\x73\141\147\145\x73\x2e\x70\x61\x63\153\x61\147\x65\137\x75\x70\x67\162\141\x64\145\144\x5f\163\x75\x63\x63\145\163\163", ["\x70\x61\143\x6b\x61\x67\145" => $package])); } public function install(PackageInstallationRequest $request, string $package) { if (!$this->isDemo()) { goto GZgkT; } return back()->with("\x77\x61\162\156\x69\156\147", trans("\x6d\x65\163\163\141\x67\145\163\x2e\x64\x65\x6d\157\137\162\x65\x73\x74\x72\x69\143\164\x69\157\x6e")); GZgkT: incevioAutoloadHelpers(getMysqliConnection()); $installable = $this->scanPackages($package); if ($installable) { goto XAgaY; } return back()->with("\145\x72\x72\157\x72", trans("\155\x65\163\163\x61\147\x65\x73\56\x70\x61\143\x6b\141\147\x65\137\156\x6f\164\137\146\157\x75\x6e\144", ["\x70\x61\x63\153\141\x67\145" => $package])); XAgaY: try { $installer = new PackageInstaller($request, $installable); $installer->install(); } catch (\Exception $e) { Log::error($e); $installer->uninstall(); Package::where("\163\154\x75\147", $package)->delete(); return back()->with("\x65\162\162\157\x72", $e->getMessage()); } Artisan::call("\x63\x61\143\150\x65\x3a\143\x6c\x65\141\162"); Artisan::call("\x72\157\x75\x74\x65\x3a\x63\154\x65\141\x72"); return back()->with("\x73\x75\143\143\x65\163\x73", trans("\155\x65\x73\x73\x61\x67\145\163\56\160\x61\x63\x6b\x61\147\145\137\x69\x6e\x73\164\141\x6c\x6c\x65\x64\137\163\165\143\x63\145\163\163", ["\160\x61\143\x6b\141\147\x65" => $package])); } public function uninstall(AdminOnlyAccessRequest $request, string $package) { if (!$this->isDemo()) { goto J1KNA; } return back()->with("\x77\141\162\x6e\151\x6e\147", trans("\x6d\x65\163\x73\141\x67\x65\x73\56\144\x65\155\157\x5f\162\x65\x73\x74\x72\151\143\164\151\x6f\156")); J1KNA: $registered = Package::where("\x73\x6c\x75\147", $package)->firstOrFail(); $uninstallable = $this->scanPackages($package); try { $installer = new PackageInstaller($request, $uninstallable); if (!$installer->uninstall()) { goto CHzbu; } Artisan::call("\143\x61\x63\150\145\72\x63\x6c\x65\141\x72"); Artisan::call("\x72\x6f\165\164\145\x3a\x63\154\x65\x61\x72"); if (!$registered->delete()) { goto lU9yf; } return back()->with("\x73\165\143\143\x65\x73\163", trans("\155\x65\x73\163\141\147\145\x73\x2e\160\141\143\x6b\141\x67\x65\x5f\165\156\x69\156\163\164\x61\x6c\154\145\x64\137\x73\165\143\x63\x65\x73\x73", ["\x70\x61\x63\153\141\x67\x65" => $package])); lU9yf: CHzbu: } catch (\Exception $e) { Log::error($e); return back()->with("\x65\x72\x72\x6f\162", $e->getMessage()); } return back()->with("\x65\162\x72\157\162", trans("\x6d\x65\x73\163\141\x67\145\x73\x2e\146\141\x69\x6c\x65\x64")); } public function activation(AdminOnlyAccessRequest $request, string $slug) { if (!$this->isDemo()) { goto JlQDa; } return response("\x65\x72\162\x6f\x72", 444); JlQDa: $package = Package::where("\x73\x6c\x75\147", $slug)->first(); if (!$package) { goto PRJ9Y; } $package->active = !$package->active; $package->save(); Artisan::call("\143\x61\x63\x68\145\72\x63\x6c\x65\141\x72"); return response("\163\165\x63\143\145\x73\x73", 200); PRJ9Y: if (!($unregistered = $this->scanPackages($slug))) { goto Eyj3I; } Package::create($unregistered); Eyj3I: return response("\x73\165\143\143\x65\x73\x73", 200); } public function updateConfig(Request $request) { if (!updateOptionTable($request)) { goto dEB3Q; } return back()->with("\x73\x75\x63\143\x65\x73\163", trans("\155\145\x73\x73\141\x67\x65\x73\x2e\160\141\143\153\141\x67\145\x5f\163\145\x74\x74\x69\156\x67\163\x5f\165\x70\x64\x61\x74\x65\144")); dEB3Q: return back()->with("\x65\x72\162\157\x72", trans("\155\x65\163\x73\x61\x67\x65\x73\56\x66\141\x69\154\x65\x64")); } public function toggleConfig(Request $request, string $option) { if (!$this->isDemo()) { goto EWEfV; } return response("\145\x72\162\x6f\162", 444); EWEfV: $updated = DB::table("\x6f\160\164\x69\157\156\x73")->where("\x6f\160\164\151\x6f\156\x5f\156\141\155\145", $option)->update(["\157\x70\164\151\157\x6e\137\x76\141\x6c\165\x65" => DB::raw("\116\117\x54\x20\x6f\160\x74\151\157\x6e\137\166\x61\154\165\145")]); if (!$updated) { goto N8weG; } Cache::forget($option); return response("\163\x75\143\143\x65\x73\x73", 200); N8weG: return response("\x65\162\162\x6f\162", 405); } private function scanPackages(?string $slug = null) : array { $packages = []; foreach (glob(base_path("\160\141\x63\153\x61\x67\x65\x73\57\x2a"), GLOB_ONLYDIR) as $dir) { if (!file_exists($manifest = $dir . "\57\155\141\x6e\151\x66\x65\163\x74\56\152\163\x6f\x6e")) { goto zQVWi; } $json = file_get_contents($manifest); if (!($json !== '')) { goto U5vHq; } $data = json_decode($json, true); if (!($data === null)) { goto gtVlE; } throw new \Exception("\111\156\x76\x61\154\151\144\40\155\141\156\x69\x66\145\x73\164\56\152\163\157\x6e\40\146\151\154\145\x20\141\164\40\x5b{$dir}\x5d"); gtVlE: $data["\x70\x61\164\x68"] = $dir; if (!($slug && $data["\163\x6c\x75\x67"] == $slug)) { goto TUO3u; } return $data; TUO3u: $packages[] = $data; U5vHq: zQVWi: Yf290: } sofar: usort($packages, function ($x, $y) { return strcasecmp($x["\156\x61\155\x65"], $y["\x6e\141\155\x65"]); }); return $packages; } private function isDemo() : bool { return config("\141\x70\160\56\x64\145\x6d\x6f") && !config("\x61\160\160\56\144\x65\x62\165\147"); } }