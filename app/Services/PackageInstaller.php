<?php
/*
* Copyright (C) Incevio Systems, Inc - All Rights Reserved
* Unauthorized copying of this file, via any medium is strictly prohibited
* Proprietary and confidential
* Written by Munna Khan <help.zcart@gmail.com>, September 2018
*/
 namespace App\Services; use Carbon\Carbon; use App\Models\Package; use Illuminate\Support\Arr; use Illuminate\Support\Str; use Illuminate\Http\Request; use Illuminate\Support\Facades\DB; use Illuminate\Support\MessageBag; use Illuminate\Support\Facades\Log; use Illuminate\Support\Facades\Schema; use Illuminate\Support\Facades\Artisan; class PackageInstaller { public $package; public $slug; public $namespace; public $path; public $migrations; public function __construct(Request $request, array $installable) { $this->package = array_merge($installable, $request->all()); $this->slug = $installable["\163\x6c\x75\x67"]; $this->namespace = "\x5c\111\156\x63\145\x76\151\x6f\134\x50\141\143\x6b\141\x67\x65\134" . Str::studly(Str::replace("\x2d", "\x5f", $this->slug)); $this->path = $installable["\160\x61\164\x68"]; $this->migrations = str_replace(base_path(), '', $this->path . "\57\x64\141\164\141\142\141\163\145\57\x6d\151\x67\x72\x61\164\x69\157\x6e\x73"); } public function install() { Log::info("\111\x6e\x73\164\141\154\154\151\156\147\x20\160\x61\143\153\x61\x67\x65\x20" . $this->slug); try { $package_data = array_merge($this->package, preparePackageInstallation($this->package)); Package::create($package_data); $this->migrate()->seed(); } catch (\Exception $exception) { Log::info("\120\141\x63\153\141\x67\x65\40\x69\156\x73\x74\141\154\x6c\x61\164\x69\x6f\x6e\40\x66\x61\x69\x6c\145\x64\x20" . $this->slug); Log::error(get_exception_message($exception)); throw new \Exception("\x50\x61\x63\x6b\x61\x67\x65\40\x49\156\163\164\x61\x6c\x6c\x61\164\x69\x6f\156\40\x46\x61\x69\154\145\144\x20" . $this->slug); } Log::info("\x53\x75\x63\x63\x65\x73\x73\146\x75\x6c\154\171\x20\x69\156\x73\x74\x61\x6c\154\x65\x64\x20\160\x61\143\x6b\x61\147\145\x20" . $this->slug); return true; } public function upgrade() { Log::info("\125\x70\x67\x72\141\144\x65\151\156\147\x20\160\141\x63\153\x61\147\x65\x20" . $this->slug); try { $package_data = array_merge($this->package, preparePackageInstallation($this->package)); Package::where("\163\x6c\x75\147", $this->slug)->update(["\x6e\x61\x6d\x65" => $package_data["\156\141\155\x65"], "\144\x65\x73\143\162\x69\x70\x74\151\157\156" => $package_data["\144\x65\163\x63\162\x69\160\x74\151\157\x6e"], "\143\157\155\160\141\164\x69\142\154\x65" => $package_data["\x63\x6f\155\x70\141\164\151\x62\x6c\145"], "\166\145\x72\x73\151\157\x6e" => $package_data["\x76\x65\162\x73\x69\x6f\156"], "\151\143\x6f\156" => $package_data["\x69\x63\x6f\156"], "\144\x65\x70\x65\156\144\x65\156\x63\171" => $package_data["\x64\145\x70\145\156\x64\145\156\x63\171"], "\x75\x70\x64\141\x74\145\144\x5f\x61\x74" => Carbon::Now()]); $this->migrate(); } catch (\Exception $exception) { Log::info("\x50\x61\143\x6b\141\x67\x65\40\x75\160\x67\x72\145\141\x64\141\x74\151\157\x6e\40\146\x61\151\x6c\x65\144\40" . $this->slug); Log::error(get_exception_message($exception)); throw new \Exception("\x50\x61\x63\x6b\141\147\x65\40\165\160\x67\162\141\x64\141\x74\x69\157\x6e\x20\146\x61\x69\x6c\x65\144\x20" . $this->slug); } Log::info("\x53\165\x63\x63\145\x73\x73\x66\x75\x6c\x6c\x79\x20\165\x70\x67\x72\141\144\145\144\40\160\x61\143\153\x61\x67\x65\x20" . $this->slug); return true; } public function migrate() { Log::info("\115\x69\147\162\141\x74\x69\157\x6e\x20\163\164\x61\162\x74\x65\x64\40\146\x6f\162\x20" . $this->slug); Artisan::call("\x6d\151\x67\x72\x61\x74\145", ["\55\55\x70\x61\164\x68" => $this->migrations, "\55\55\146\157\x72\x63\145" => true]); Log::info(Artisan::output()); return $this; } private function seed() { Log::info("\123\145\x65\144\x69\156\147\40\x70\x61\x63\x6b\141\147\145\x20\x64\141\x74\141\x20\x66\x6f\x72\x20" . $this->slug); foreach (glob($this->path . "\57\144\141\x74\141\x62\x61\x73\145\x2f\163\x65\145\144\163\x2f\x2a\x2e\160\150\x70") as $filename) { $classes = get_declared_classes(); include $filename; $temp = array_diff(get_declared_classes(), $classes); $migration = Arr::last($temp, function ($value, $key) { return $value !== "\111\154\x6c\x75\x6d\x69\x6e\x61\x74\145\x5c\104\141\x74\x61\142\x61\x73\x65\x5c\x53\x65\x65\144\145\x72"; }); Artisan::call("\x64\x62\x3a\x73\x65\145\x64", ["\x2d\x2d\143\154\141\163\163" => $migration, "\x2d\x2d\x66\157\x72\143\x65" => true]); Log::info(Artisan::output()); wNPC7: } W977B: return $this; } public function uninstall() { Log::info("\125\x6e\151\x6e\x73\164\x61\154\x6c\151\x6e\x67\x20\x50\x61\x63\153\141\x67\x65\x3a\40" . $this->slug); $file = $this->path . "\57\x73\162\x63\57\x55\156\151\156\163\164\x61\154\x6c\145\x72\x2e\160\150\x70"; if (!file_exists($file)) { goto d1sfK; } include $file; d1sfK: $class = $this->namespace . "\134\x55\156\x69\x6e\x73\x74\x61\154\154\145\162"; if (class_exists($class)) { goto hs2AF; } Log::info("\x55\156\151\156\x73\164\141\x6c\x6c\x65\x72\40\x6e\x6f\x74\40\146\157\165\156\144\40\x69\x6e\40\x74\x68\x65\x20\x70\x61\x63\153\x61\147\145\40\144\151\x72\40\146\157\162\x20" . $this->slug); throw new \Exception("\125\x6e\x69\156\163\x74\141\x6c\154\x65\162\x20\156\157\x74\40\x66\157\x75\156\144\x20\146\157\x72\x20\x74\150\145\x20\x70\141\143\x6b\x61\x67\145\40" . $this->slug); hs2AF: try { (new $class())->cleanDatabase(); $this->rollback(); } catch (\Exception $e) { Log::info("\120\141\143\x6b\141\147\x65\40\x75\x6e\151\156\163\x74\x61\x6c\x6c\x61\x74\x69\157\x6e\40\x66\141\151\x6c\x65\144\x3a\40" . $this->slug); Log::error($e); throw new \Exception("\125\x6e\x69\156\x73\164\141\154\154\x61\164\151\x6f\x6e\40\146\x61\x69\x6c\145\144\72\40" . $this->slug); } Log::info("\123\x75\x63\x63\x65\x73\163\x66\x75\154\154\171\40\165\x6e\151\x6e\163\x74\x61\x6c\x6c\x65\144\x20\x70\x61\x63\153\x61\147\145\40" . $this->slug); return $this; } private function rollback() { Log::info("\122\157\x6c\154\40\142\x61\143\x6b\x20\x63\141\x6c\154\x65\144\x2e\56\x2e"); $migrations = array_reverse(glob($this->path . "\57\x64\x61\164\141\142\141\x73\145\x2f\x6d\151\x67\x72\141\x74\151\x6f\x6e\163\x2f\x2a\137\52\56\x70\150\x70")); if (!empty($migrations)) { goto SI3Dn; } Log::info("\x4e\157\40\155\151\x67\162\141\164\151\x6f\x6e\x20\x74\x6f\x20\162\x6f\x6c\x6c\x20\142\x61\143\x6b\x20\x66\x6f\162\x20\160\x61\143\153\141\x67\145\x20" . $this->slug); return $this; SI3Dn: Schema::disableForeignKeyConstraints(); DB::statement("\x53\x45\x54\40\106\117\x52\105\111\107\x4e\x5f\x4b\x45\131\x5f\103\x48\105\103\113\123\40\x3d\x20\x30"); foreach ($migrations as $filename) { $migration = str_replace("\56\160\x68\160", '', basename($filename)); Log::info("\x52\157\154\x6c\151\x6e\x67\x20\142\141\143\x6b\72\40" . $migration); $row = DB::table("\x6d\151\x67\162\x61\164\151\x6f\156\163")->where("\155\x69\147\x72\141\164\151\157\x6e", $migration); if ($row->first()) { goto UuUyz; } Log::info($migration . "\40\167\141\x73\40\156\x6f\x74\x20\155\151\x67\162\141\164\145\144\40\x62\x65\146\x6f\162\x65\x2c\40\x70\x72\x6f\142\x61\142\154\171\x20\151\x74\134\47\x73\x20\x61\x20\x6e\x65\x77\40\155\x69\147\162\x61\164\x69\x6f\x6e\x20\x66\151\154\x65\56"); Log::info("\123\x6b\151\160\x70\x69\x6e\x67\x20\162\157\154\154\x65\x64\x20\142\x61\143\x6b\x3a\40" . $migration); goto BJTHL; UuUyz: $class = Str::studly(implode("\x5f", array_slice(explode("\x5f", $migration), 4))); if (class_exists($class)) { goto xFkLn; } include $filename; xFkLn: (new $class())->down(); if ($row->delete()) { goto VXz29; } Log::info("\122\157\154\x6c\142\141\x63\153\x20\x46\101\111\x4c\x45\x44\72\40" . $migration); throw new \Exception("\115\151\x67\x72\141\164\x69\157\156\40\x72\157\154\x6c\x62\141\x63\153\x20\x66\141\x69\x6c\145\144\x3a\x20" . $this->slug); goto i_O1Q; VXz29: Log::info("\x52\157\154\x6c\145\x64\x20\142\141\x63\153\72\x20" . $migration); i_O1Q: BJTHL: } P4Liv: Schema::enableForeignKeyConstraints(); DB::statement("\123\105\x54\40\x46\117\122\105\111\x47\x4e\137\113\x45\131\x5f\103\x48\105\103\113\123\40\75\40\61"); Log::info("\x41\x6c\x6c\x20\155\x69\x67\x72\141\164\151\157\156\x73\40\150\x61\x73\x20\142\x65\145\156\x20\162\157\154\x6c\145\x64\x20\142\x61\143\x6b\x20\146\x6f\162\40\160\x61\x63\153\x61\x67\145\40" . $this->slug); return $this; } }